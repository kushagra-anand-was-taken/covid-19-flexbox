{"version":3,"sources":["util.js","InfoBox.jsx","Map.jsx","Table.jsx","LineGraph.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","InfoBox","title","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","i","key","src","height","width","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","borderColor","backgroundColor","Footer","textAlign","textDecoration","target","href","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","textShadow","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wWAIMA,EAAkB,CACtBC,MAAO,CACLC,IAAK,UACLC,IAAK,qBACLC,QAAS,yBACTC,WAAY,KAEdC,UAAW,CACTJ,IAAK,UACLC,IAAK,mBACLC,QAAS,uBACTC,WAAY,MAEdE,OAAQ,CACNL,IAAK,UACLC,IAAK,kBACLC,QAAS,sBACTC,WAAY,MAGHG,EAAkB,SAACC,GAAD,OAC7BA,EAAI,UAAMC,IAAQD,GAAME,OAAO,SAAY,MAEhCC,EAAW,SAACC,GACvB,IAAMC,EAAU,YAAOD,GAQvB,OAPAC,EAAWC,MAAK,SAACC,EAAGC,GAClB,OAAID,EAAEf,MAAQgB,EAAEhB,OACN,EAED,KAGJa,G,0BCZMI,MArBf,YAA8D,IAA5CC,EAA2C,EAA3CA,MAAYC,GAA+B,EAArCnB,MAAqC,EAA/BmB,OAAMC,EAAyB,EAAzBA,OAAOC,EAAkB,EAAlBA,MAAUC,EAAQ,0DACzD,OACI,kBAACC,EAAA,EAAD,CACAC,QAASF,EAAME,QACfC,UAAS,kBAAaL,GAAU,oBAAvB,YACLD,GAAS,iBAGT,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCV,GAEL,wBAAIO,UAAS,0BAAqBN,GAAS,0BAA4BE,EAAvE,a,yBCGDQ,MAdf,YAAiD,IAAnCC,EAAkC,EAAlCA,UAAUC,EAAwB,EAAxBA,UAAUC,EAAc,EAAdA,OAAOC,EAAO,EAAPA,KACrC,OACI,yBAAKR,UAAU,OACX,kBAAC,IAAD,CAAYO,OAAQA,EAAQC,KAAMA,GAClC,kBAACC,EAAA,EAAD,CACFC,IAAI,qDACJC,YAAY,2EF6BO,SAACxB,GAAD,IAAOmB,EAAP,uDAAmB,QAAnB,OAC3BnB,EAAKyB,KAAI,SAACC,GAAD,OACP,kBAACC,EAAA,EAAD,CACEP,OAAQ,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACtDC,YAAa,GACbf,MAAO7B,EAAgBgC,GAAW9B,IAClC2C,UAAW7C,EAAgBgC,GAAW9B,IACtC4C,OACEC,KAAKC,KAAKT,EAAQP,IAAchC,EAAgBgC,GAAW3B,YAG7D,kBAAC4C,EAAA,EAAD,KACE,yBAAKvB,UAAU,kBACb,yBACEA,UAAU,YACVwB,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QAE1B,yBAAK1B,UAAU,aAAaa,EAAQA,SACpC,yBAAKb,UAAU,kBAAf,SACShB,IAAQ6B,EAAQtC,OAAOU,OAAO,QAEvC,yBAAKe,UAAU,kBAAf,aACahB,IAAQ6B,EAAQjC,WAAWK,OAAO,OAAQ,KAEvD,yBAAKe,UAAU,eAAf,WACWhB,IAAQ6B,EAAQhC,QAAQI,OAAO,cEpD3C0C,CAActB,EAAWC,M,OCcnBsB,MAvBf,YAA+B,IAAdvB,EAAa,EAAbA,UACf,OACE,yBAAKL,UAAU,SACZK,EAAUO,KAAI,WAAkCiB,GAAlC,IAAGhB,EAAH,EAAGA,QAAStC,EAAZ,EAAYA,MAAOwC,EAAnB,EAAmBA,YAAnB,OACb,wBAAIe,IAAKD,GACP,4BACE,yBAAK7B,UAAU,YACb,yBACE+B,IAAKhB,EAAYW,KACjBF,MAAO,CAAEQ,OAAQ,OAAQC,MAAO,YAItC,4BAAKpB,GACL,4BACE,gCAAS7B,IAAQT,GAAOU,OAAO,e,QCfrCiD,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLlB,OAAQ,IAGZmB,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAa1D,GAC5B,OAAOH,IAAQ6D,EAAYC,OAAO7D,OAAO,WAK/C8D,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJjE,OAAQ,WACRkE,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CACLC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAOzE,IAAQ8D,GAAO7D,OAAO,YAOnCX,EAAkB,CACtBC,MAAO,CAKLC,IAAK,UACLC,IAAK,qBACLC,QAAS,yBACTC,WAAY,KAEdC,UAAW,CACTJ,IAAK,UACLC,IAAK,mBACLC,QAAS,uBACTC,WAAY,MAEdE,OAAQ,CACNL,IAAK,UACLC,IAAK,kBACLC,QAAS,sBACTC,WAAY,MAqDD+E,EAlDG,SAAC,GAAuC,IAAD,IAApCpD,iBAAoC,MAAxB,QAAwB,EAAZT,EAAY,+BAC/B8D,mBAAS,IADsB,mBAChDxE,EADgD,KAC1CyE,EAD0C,KAEjDC,EAAiB,SAAC1E,GACtB,IACI2E,EADEC,EAAY,GAGlB,IAAK,IAAIC,KAAQ7E,EAAKZ,MAAO,CAE3B,GAAIuF,EAAe,CACjB,IAAMG,EAAe,CACnBC,EAAGF,EACHG,EAAGhF,EAAKmB,GAAW0D,GAAQF,GAE7BC,EAAUK,KAAKH,GAEjBH,EAAgB3E,EAAKmB,GAAW0D,GAElC,OAAOD,GAaT,OAXAM,qBAAU,YACO,uCAAG,sBAAA/E,EAAA,sEACVgF,MAAM,8DACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpF,GACL,IAAM4E,EAAYF,EAAe1E,GACjCyE,EAAQG,MALI,2CAAH,qDAQfW,KACC,CAACpE,IAEF,yBAAKN,UAAWH,EAAMG,YACf,OAAJb,QAAI,IAAJA,OAAA,EAAAA,EAAMwF,QAAS,GACd,kBAAC,OAAD,CACEzC,QAASA,EACT/C,KAAM,CACJyF,SAAU,CACR,CACEC,YAAavG,EAAgBgC,GAAW9B,IACxCsG,gBAAiBxG,EAAgBgC,GAAW5B,QAC5CS,KAAMA,SC9FP4F,MAff,WACE,OACE,yBAAKvD,MAAO,CAAEwD,UAAW,SAAU7E,MAAO,UAA1C,uCAC6B,IAC3B,uBACEqB,MAAO,CAAEyD,eAAgB,QACzBC,OAAO,SACPC,KAAK,yCAHP,uB,cCuJSC,MA1If,WAAgB,IAAD,EACqBzB,mBAAS,IAD9B,mBACNtD,EADM,KACKgF,EADL,OAEiB1B,mBAAS,aAF1B,mBAEN9C,EAFM,KAEGyE,EAFH,OAGyB3B,mBAAS,IAHlC,mBAGN5C,EAHM,KAGOwE,EAHP,OAIqB5B,mBAAS,IAJ9B,mBAIN6B,EAJM,KAIKC,EAJL,OAKqB9B,mBAAS,CAAE3C,IAAK,QAAS0E,IAAK,UALnD,mBAKNC,EALM,KAKKC,EALL,OAMiBjC,mBAAS,GAN1B,mBAMNkC,EANM,KAMGC,EANH,OAO2BnC,mBAAS,IAPpC,mBAONoC,EAPM,KAOQC,EAPR,OAQqBrC,mBAAS,SAR9B,mBAQNrD,EARM,KAQK2F,EARL,KASb5B,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpF,GACLoG,EAAepG,QAElB,IAEHkF,qBAAU,YACc,uCAAG,sBAAA/E,EAAA,sEACjBgF,MAAM,4CACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpF,GACL,IAAMkB,EAAYlB,EAAKyB,KAAI,SAACC,GAAD,MAAc,CACvCqF,KAAMrF,EAAQA,QACdiC,MAAOjC,EAAQE,YAAYoF,SAGvB/G,EAAaF,EAASC,GAC5BsG,EAAarG,GACb4G,EAAgB7G,GAChBkG,EAAahF,MAZM,2CAAH,qDAetB+F,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAAhH,EAAA,6DAChBiH,EAAcD,EAAMpB,OAAOpC,MAE3BpC,EACY,cAAhB6F,EACI,qCADJ,mDAEgDA,GAN5B,SAQhBjC,MAAM5D,GACT6D,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpF,GACLmG,EAAWiB,GACXhB,EAAepG,GAGXyG,EADY,cAAhBW,EACiB,CAAEvF,IAAK,QAAS0E,IAAK,SACrB,CAACvG,EAAK4B,YAAYC,IAAK7B,EAAK4B,YAAYE,OAEzD6E,EAAW,MAlBO,2CAAH,sDAuBrB,OACE,yBAAK9F,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,wBAAIwB,MAAO,CAAErB,MAAO,UAAWqG,WAAY,qBAA3C,iBAGA,kBAACC,EAAA,EAAD,CAAazG,UAAU,iBACrB,kBAAC0G,EAAA,EAAD,CACEC,QAAQ,WACRC,SAAUP,EACVvD,MAAOjC,GAEP,kBAACgG,EAAA,EAAD,CAAU/D,MAAM,aAAhB,aACCzC,EAAUO,KAAI,SAACC,EAASgB,GAAV,OACb,kBAACgF,EAAA,EAAD,CAAU/E,IAAKD,EAAGiB,MAAOjC,EAAQiC,OAC9BjC,EAAQqF,YAYnB,yBAAKlG,UAAU,cACb,kBAAC,EAAD,CACEN,OAAK,EACLC,OAAsB,UAAdW,EACRP,QAAS,SAAC+G,GAAD,OAAOb,EAAa,UAC7BxG,MAAM,QACNlB,MAAOO,EAAgBiC,EAAYgG,YACnCnH,MAAOd,EAAgBiC,EAAYxC,SAErC,kBAAC,EAAD,CACEkB,MAAM,YACNE,OAAsB,cAAdW,EACRP,QAAS,SAAC+G,GAAD,OAAOb,EAAa,cAC7B1H,MAAOO,EAAgBiC,EAAYiG,gBACnCpH,MAAOd,EAAgBiC,EAAYnC,aAErC,kBAAC,EAAD,CACEc,OAAK,EACLC,OAAsB,WAAdW,EACRP,QAAS,SAAC+G,GAAD,OAAOb,EAAa,WAC7BxG,MAAM,SACNlB,MAAOO,EAAgBiC,EAAYkG,aACnCrH,MAAOd,EAAgBiC,EAAYlC,WAGvC,kBAAC,EAAD,CACEyB,UAAWA,EACXD,UAAW0F,EACXxF,OAAQoF,EACRnF,KAAMqF,KAIV,yBAAK7F,UAAU,cACb,kBAACF,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,qDACA,kBAAC,EAAD,CAAOI,UAAWmF,IAGlB,wBAAIxF,UAAU,mBAAd,iBAA+CM,GAC/C,kBAAC,EAAD,CAAWN,UAAU,aAAaM,UAAWA,MAIjD,kBAAC,EAAD,SC3IY4G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1f8f3c2d.chunk.js","sourcesContent":["import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#386eab\",\n    rgb: \"rgb(154, 182, 214)\",\n    half_op: \"rgb(154, 182, 214,0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgba(251,68,67)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000,\n  },\n};\nexport const prettyPrintStat = (stat) =>\n  stat ? `${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases:{numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered:{numeral(country.recovered).format(\"0,0\")}{\" \"}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from 'react';\nimport \"./InfoBox.css\";\nimport {Card,CardContent,Typography} from \"@material-ui/core\"\nfunction InfoBox({title,cases,isRed,active,total, ...props}) {\n    return (\n        <Card\n        onClick={props.onClick}\n        className={`infoBox ${active && \"infoBox--selected\"} ${\n            isRed && \"infoBox--red\"\n          }`}\n        >\n            <CardContent>\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{total} Total</h2>\n                {/* <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    \n                </Typography > */}\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport  \"./Map.css\";\n import { showDataOnMap } from \"./util\";\nfunction Map({countries,casesType,center,zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n            <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases, countryInfo }, i) => (\n        <tr key={i}>\n          <td>\n            <div className=\"info-fla\">\n              <img\n                src={countryInfo.flag}\n                style={{ height: \"26px\", width: \"38px\" }}\n              />\n            </div>\n          </td>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\nconst casesTypeColors = {\n  cases: {\n    // hex: \"#a820df\",\n    // rgb: \"rgb(169, 32, 223)\",\n    // half_op: \"rgb(169, 32, 223,0.5)\",\n    // multiplier: 800,\n    hex: \"#386eab\",\n    rgb: \"rgb(154, 182, 214)\",\n    half_op: \"rgb(154, 182, 214,0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgba(125,215,29)\",\n    half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgba(251,68,67)\",\n    half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000,\n  },\n};\nconst LineGraph = ({ casesType = \"cases\", ...props }) => {\n  const [data, setData] = useState({});\n  const buildChartData = (data) => {\n    const chartData = [];\n    let lastDataPoint;\n    // console.log(\"Data in line graph -->>\", data);\n    for (let date in data.cases) {\n      // console.log(data[casesType][date]);\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          const chartData = buildChartData(data);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                borderColor: casesTypeColors[casesType].hex,\n                backgroundColor: casesTypeColors[casesType].half_op,\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div style={{ textAlign: \"center\", color: \"black\" }}>\n      Made With ❤️ by Kushagra |{\" \"}\n      <a\n        style={{ textDecoration: \"none\" }}\n        target=\"_blank\"\n        href=\"https://myportfolio-kush.netlify.app/\"\n      >\n        Contact Developer\n      </a>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport Footer from \"./Footer\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n\n//https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldWide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 20.5937, lng: 78.9629 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldWide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode === \"worldWide\"\n          ? setMapCenter({ lat: 20.5937, lng: 78.9629 })\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\n        setMapZoom(4);\n      });\n  };\n\n  // console.log(countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1 style={{ color: \"#386eab\", textShadow: \"2px 1px lavender\" }}>\n            COVID-19 LIVE\n          </h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldWide\">WorldWide</MenuItem>\n              {countries.map((country, i) => (\n                <MenuItem key={i} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n\n              {/* <MenuItem value=\"worldWide\">WorldWide</MenuItem>\n    <MenuItem value=\"worldWide\">option 2</MenuItem>\n    <MenuItem value=\"worldWide\">option 3</MenuItem>\n  <MenuItem value=\"worldWide\">yo id no</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <div className=\"app__right\">\n        <Card>\n          <CardContent>\n            <h3>Live cases by Country</h3>\n            <Table countries={tableData} />\n            {/* <h3>Worldwide new {casesType}</h3>\n<LineGraph */}\n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </CardContent>\n        </Card>\n\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}